.\"	Copyright (c) 2013 Twitter, Inc.
.\"	Originally written by Jan Schaumann <jschauma@twitter.com> in
.\"	April 2013.
.\"
.Dd April 20, 2014
.Dt JASS 1
.Os
.Sh NAME
.Nm jass
.Nd just another secret sharer
.Sh SYNOPSIS
.Nm
.Op Fl GVdehv
.Op Fl f Ar file
.Op Fl g Ar group
.Op Fl k Ar key
.Op Fl p Ar passin
.Op Fl u Ar user
.Sh DESCRIPTION
The
.Nm
tool allows you to share a secret with other people through the use of SSH
keypairs.
It accepts input on stdin and generates ciphertext on stdout, encrypted
for the given key or user.
.Sh OPTIONS
The following options are supported by
.Nm :
.Bl -tag -width _p_passin_
.It Fl G
Also look for public keys on GitHub.
.It Fl V
Print version number and exit.
.It Fl e
Perform encryption.
This is the default.
.It Fl d
Perform decryption.
.It Fl f Ar file
Encrypt/decrypt this file.
If not specified,
.Nm
will read data from stdin.
.It Fl g Ar group
Encrypt for all members of this group.
.It Fl h
Print a short help message and exit.
.It Fl k Ar key
Encrypt or decrypt the input using the key(s) found in
.Ar key .
.It Fl p Ar passin
Specify the method to retrieve the passphrase for the private key.
See
.Xr "PASS PHRASE ARGUMENTS"
for details.
Defaults to interactively prompt on the controlling tty.
.It Fl u Ar user
Encrypt the input for this user, attempting to find suitable public SSH
keys on the local system or from LDAP.
.It Fl v
Be verbose.
Can be specified multiple times.
.El
.Sh DETAILS
It is not uncommon for people within a given organization to have a need
to share secrets with one another.
.Nm
lets you do this through the use of SSH RSA keys, as those are frequently
already well distributed and trusted.
.Pp
Since asymmetric encryption is only suitable for inputs smaller than the
keysize,
.Nm
will extract the public RSA key from an SSH formatted key,
generate a 256 bit session key, and then encrypt the session key using the
public RSA key.
The data itself is encrypted using AES-256-CBC mode with said session key.
.Pp
As an alternative to providing a public key, a recipient may also be
specified via the
.Fl g
and
.Fl u
flags.
If
.Fl g
was specified,
.Nm
will expand the given group to individual users.
For each user,
.Nm
will first look for that user's ~/.ssh/authorized_keys file, then the file
/etc/ssh/authorized_keys/<user>.
If neither of these is readable, it will look for the field 'twSSHPubkey'
for the given username in LDAP.
If a usable pubkey was still not found,
.Nm
may then look for a key on the internet, for example on GitHub if the
.Fl G
flag was specified.
.Pp
Eventually,
.Nm
will attempt to encrypt the data for each of the public keys found.
.Pp
The output from
.Nm
consists of several
.Xr uuencode 1 Ns ed
files.
The first is the encrypted message, the following files the session key
encrypted for each of the public keys.
.Nm
will properly extract, decode and use these when the
.Fl d
flag is specified, though it should be noted that the decrypted session
key briefly lives on the disk in a temporary directory.
.Sh PASS PHRASE ARGUMENTS
.Nm
allows you to specify the passphrase for your private key via one of the
following methods.
Please note that doing so carries certain risks, and you should carefully
evaluate what may be the best option for you.
.Bl -tag -width pass_password_
.It \fBpass:password\fR
The actual password is \fBpassword\fR.
Since the password is visible to utilities such as
.Xr ps 1
this form should only be used where security is not important.
.It \fBenv:var\fR
Obtain the password from the environment variable \fBvar\fR.
Since the environment of other processes may be visible via e.g.
.Xr ps 1 m
this option should be used with caution.
.It \fBfile:pathname\fR
The first line of \fBpathname\fR is the password.
\fBpathname\fR need not refer to a regular file: it could for example
refer to a device or named pipe.
Note that standard Unix file access controls should be used to protect
this file.
.El
.Sh EXAMPLES
To generate a secret message encrypted with the file 'bobs_pubkey' and
store it in the file 'secret':
.Bd -literal -offset indent
echo "The ostrich has left the savannah." | \\
        jass -e -k bobs_pubkey > secret
.Ed
.Pp
To send a secret message to 'jschauma':
.Bd -literal -offset indent
echo "The lion sleeps." | jass -u jschauma |  \\
        mail -s "Nothing to see here" jschauma
.Ed
.Pp
To decrypt a secret message generated by
.Nm
using the private ssh key found in 'my_privkey':
.Bd -literal -offset indent
jass -d -k my_privkey < secret
.Ed
.Pp
To encrypt the file service.yml for the user 'jschauma':
.Bd -literal -offset indent
jass -u jschauma -f service.yml >service.yml.enc
.Ed
.Pp
To encrypt data for multiple recipients:
.Bd -literal -offset indent
jass -u user1 -u user2 -u user3 <data
.Ed
.Sh ENVIRONMENT
When attempting to query LDAP for public keys,
.Nm
will require the variables LDAFIELD and LDAPSEARCH to be set.
You can either edit the script and set them in there, or export them in
your environment.
.Pp
The following are example values.
.Bl -tag -width LDAPSEARCH_
.It LDAPFIELD
SSHPubkey
.It LDAPSEARCH
ldapsearch -LLLxh ldap.yourdomain.com -b dc=example,dc=com
.El
.Sh SEE ALSO
.Xr enc 1 ,
.Xr openssl 1 ,
.Xr rsautl 1 ,
.Xr ssh-keygen 1
.Sh BUGS
.Nm
will only allow RSA keys.
.Pp
.Nm
assumes the public SSH key to be in OpenSSH's default format; if the
public key is in another format, it will fail.
.Pp
.Nm
will not accept private SSH keys in PEM format when decrypting.
.Sh HISTORY
.Nm
was originally written by
.An Jan Schaumann
.Aq jschauma@twitter.com
in April 2013.
